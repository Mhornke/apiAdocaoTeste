// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Especie {
  id      Int      @id @default(autoincrement())
  nome    String // Nome da espécie, até 60 caracteres
  animais Animal[]

  @@map("especies")
}

model Animal {
  id        Int      @id @default(autoincrement())
  nome      String
  idade     Int?
  sexo      Sexos
  status    Boolean @default(true)
  destaque  Boolean  @default(false)
  foto      String   @db.Text
  descricao String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  porte     Portes   @default(Medio)
  especie   Especie  @relation(fields: [especieId], references: [id])
  especieId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String // Agora referencia o UUID de `User`
  fotos     Foto[]
  pedidos   Pedido[]

  @@map("animais")
}

model Foto {
  id         Int    @id @default(autoincrement())
  descricao  String // Descrição da foto, até 30 caracteres
  codigoFoto String @db.Text // Código ou URL da foto
  animal     Animal @relation(fields: [animalId], references: [id])
  animalId   Int

  @@map("fotos")
}

model User {
  id           String   @id @default(uuid()) // UUID nativo do PostgreSQL
  nome         String // Nome do user, até 60 caracteres
  fone         String // Telefone do user, até 60 caracteres
  endereco     String // Endereço do user, até 180 caracteres
  email        String   @unique // Email do user, único
  senha        String // Senha do user
  recoveryCode String? // Código de recuperação (opcional)
  createdAt    DateTime @default(now()) // Data de criação
  updatedAt    DateTime @updatedAt // Data de última atualização
  animais      Animal[]
  pedidos      Pedido[]

  @@map("users")
}

model Pedido {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String // Referência ao ID do user (UUID)
  animal    Animal   @relation(fields: [animalId], references: [id])
  animalId  Int // Referência ao ID do animal
  descricao String // Descrição do pedido, até 300 caracteres
  resposta  String? // Resposta ao pedido (opcional)
  createdAt DateTime @default(now()) // Data de criação
  updatedAt DateTime @updatedAt // Data de última atualização

  @@map("pedidos")
}

// model Admin {
//   id         Int      @id @default(autoincrement())
//   nome       String   // Nome do administrador, até 60 caracteres
//   email      String   @unique // Email do administrador, único
//   senha      String   // Senha do administrador
//   createdAt  DateTime @default(now()) // Data de criação
//   updatedAt  DateTime @updatedAt      // Data de última atualização
//   animais    Animal[]
//   @@map("admins")
// }

enum Portes {
  Pequeno
  Medio
  Grande
}

enum Sexos {
  Macho
  Femea
}
